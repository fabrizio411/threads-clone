// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum ContentShownType {
  FOLLOWING
  PUBLIC
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  email String @unique
  username String @unique
  password String
  bio String?
  isPrivate Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  image String?
  followingIds String[] @db.ObjectId
  followersIds String[] @db.ObjectId
  followersPendingIds String[] @db.ObjectId
  hasNotification Boolean?
  contentShown ContentShownType @default(FOLLOWING)

  posts Post[]
  comments Comment[]
  notifications Notification []
}

model Post {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  body String
  userId String @db.ObjectId
  likedIds String[] @db.ObjectId
  isRepost Boolean?
  quoteId String? @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  comments Comment[]
}

model Comment {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  body String
  userId String @db.ObjectId
  postId String? @db.ObjectId
  commentId String? @db.ObjectId
  comments Comment[] @relation("SelfComment")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post? @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment Comment? @relation("SelfComment", fields: [commentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Notification {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  body String
  userId String @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}